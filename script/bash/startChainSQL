#!/bin/bash

usage() {
    echo "用于启动 chainsqld "
    echo
    echo "usage startChainSQL [options]"
    echo "  OPTIONS"
    echo "   --wait		启动 chainSQL 直到链上有数据"
    echo "   --path		指定 chainSQL 启动路径"
    echo
}

pwd=`pwd`

POSITIONAL=()

wait=false
path=$pwd

while [[ $# -gt 0 ]]
do
    key=$1
    case $key in
        --wait)
            wait=true
            shift 	# pass argument
            ;;
        --path)
            if [ ! -n "$2" ]; then
                path=$pwd
            else
                path=$2
            fi
            shift
            shift
            ;;
        *)
            usage
            shift
            exit 0
            ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z $path ]; then
    echo "path is empty."
    exit 1
fi

if [ ! -d $path ]; then
    echo "$path must be created firstly."
    exit 1
fi

cd $path

if [[ ! -f "$path/chainsqld" ]]; then
    echo "$path/chainsqld may be missed."
    exit 1
fi

if [[ ! -f "$path/chainsqld.cfg" ]]; then
    echo "chainsqld.cfg must be located in the same path with chainsqld."
    exit 1
fi

server_info=`./chainsqld server_info 2>/dev/null`
has_error=`echo $server_info | jq 'has("error")'`

# 没有启动 chainsqld
if $has_error; then

    echo "chainsqld is starting."

    ./chainsqld 2>/dev/null &

    if $wait; then
        sleep 2
        while true; do
            server_info=`./chainsqld server_info 2>/dev/null`
            has_error=`echo $server_info | jq 'has("error")'`
            if $has_error; then
                echo "chainsqld may have been stopped" 
                exit 0
            else
                server_info=`./chainsqld server_info 2>/dev/null|jq .result.info.complete_ledgers`
                if [[ "$server_info" != '"empty"' ]]; then
                    break
                fi
            fi
            sleep 1
        done

        echo "chainsqld has started successfully."
    fi

else
    echo "chainsqld has started."
fi

cd $pwd
exit 0

